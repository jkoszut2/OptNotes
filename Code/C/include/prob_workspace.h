
/*
Auto-generated by CVXPYgen on December 02, 2023 at 23:32:09.
Content: Type definitions and variable declarations.
*/

#include "ecos.h"

#ifndef CPG_TYPES_H
# define CPG_TYPES_H

typedef double c_float;
typedef int c_int;

// Compressed sparse column (csc) matrix
typedef struct {
  c_int      nzmax;
  c_int      n;
  c_int      m;
  c_int      *p;
  c_int      *i;
  c_float    *x;
  c_int      nz;
} csc;

// Canonical parameters
typedef struct {
  c_float    *c;         // Canonical parameter c
  c_float    d;          // Canonical parameter d
  csc        *A;         // Canonical parameter A
  c_float    *b;         // Canonical parameter b
  csc        *G;         // Canonical parameter G
  c_float    *h;         // Canonical parameter h
} Canon_Params_t;

// Flags indicating outdated canonical parameters
typedef struct {
  int        c;          // Bool, if canonical parameter c outdated
  int        d;          // Bool, if canonical parameter d outdated
  int        A;          // Bool, if canonical parameter A outdated
  int        b;          // Bool, if canonical parameter b outdated
  int        G;          // Bool, if canonical parameter G outdated
  int        h;          // Bool, if canonical parameter h outdated
} Canon_Outdated_t;

// Primal solution
typedef struct {
  c_float    *var1;      // Your variable var1
} CPG_Prim_t;

// Dual solution
typedef struct {
  c_float    d0;         // Your dual variable for constraint d0
  c_float    d1;         // Your dual variable for constraint d1
  c_float    d2;         // Your dual variable for constraint d2
} CPG_Dual_t;

// Solver information
typedef struct {
  c_float    obj_val;    // Objective function value
  c_int      iter;       // Number of iterations
  c_int      status;     // Solver status
  c_float    pri_res;    // Primal residual
  c_float    dua_res;    // Dual residual
} CPG_Info_t;

// Solution and solver information
typedef struct {
  CPG_Prim_t *prim;      // Primal solution
  CPG_Dual_t *dual;      // Dual solution
  CPG_Info_t *info;      // Solver info
} CPG_Result_t;

// Solver settings
typedef struct {
  c_float    feastol;
  c_float    abstol;
  c_float    reltol;
  c_float    feastol_inacc;
  c_float    abstol_inacc;
  c_float    reltol_inacc;
  c_int      maxit;
} Canon_Settings_t;

#endif // ifndef CPG_TYPES_H

// Vector containing flattened user-defined parameters
extern c_float cpg_params_vec[2];

// Sparse mappings from user-defined to canonical parameters
extern csc canon_h_map;

// Canonical parameters
extern c_float canon_c[3];
extern c_float canon_c_ECOS[3];
extern csc canon_A;
extern csc canon_A_ECOS;
extern c_float canon_b[1];
extern c_float canon_b_ECOS[1];
extern csc canon_G;
extern csc canon_G_ECOS;
extern c_float canon_h[4];
extern c_float canon_h_ECOS[4];

// Struct containing canonical parameters
extern Canon_Params_t Canon_Params;
extern Canon_Params_t Canon_Params_ECOS;

// Struct containing flags for outdated canonical parameters
extern Canon_Outdated_t Canon_Outdated;

// User-defined variables
extern c_float cpg_var1[3];

// Dual variables associated with user-defined constraints

// Struct containing primal solution
extern CPG_Prim_t CPG_Prim;

// Struct containing dual solution
extern CPG_Dual_t CPG_Dual;

// Struct containing solver info
extern CPG_Info_t CPG_Info;

// Struct containing solution and info
extern CPG_Result_t CPG_Result;

// Struct containing solver settings
extern Canon_Settings_t Canon_Settings;

// ECOS array of SOC dimensions
extern const c_int ecos_q[1];

// ECOS workspace
extern pwork* workspace;

// ECOS exit flag
extern c_int ecos_flag;

// NEW
extern const int num_cones;
extern const int cone_orders[];
extern const int cone_exprs[];
extern const int num_cone_vars;
extern int cone_start_idxs[];
extern int e_socs[];

extern const idxint n;
extern const int m;
extern const idxint p;
extern const idxint l;
extern const idxint ncones;

#define NNZK 17